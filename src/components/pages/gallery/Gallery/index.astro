---
// Library
import { Image } from "astro:assets";

// Metadata
import metadata from "@src/data/images.json";

// Types
import type { ImageMetadata } from "astro";

// Gallery Images
const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/*.{jpeg,jpg,png,gif}",
);

// Select the images to be shown in the gallery
const gallery = metadata
    .filter((img) => img.gallery)
    .map((img) => {
        return {
            src: img.src,
            image: images[img.src],
        };
    });
---

<div id="selected-image-wrapper">
    <img id="selected-image" src="" alt="" />
</div>

<div id="gallery" class="perspective-parent">
    {
        gallery.map(({ src, image }) => (
            <div class="image-wrapper animate view-timeline perspective">
                <Image
                    src={image()}
                    alt=""
                    format="avif"
                    height={300}
                    class="img"
                    data-src={src}
                />
            </div>
        ))
    }
</div>

<script>
    const pictures = document.querySelectorAll(
        ".perspective",
    ) as NodeListOf<HTMLDivElement>;

    pictures.forEach((e) => {
        // When we mouse over the picture card, apply perspective tilt
        e.addEventListener("mousemove", (m) => {
            // @ts-ignore Typescript doesn't like getBoundingClientRect()
            const boundingRect: any = m.currentTarget?.getBoundingClientRect();
            const x = m.clientX - boundingRect.left;
            const y = m.clientY - boundingRect.top;
            const xRatio = x / boundingRect?.width;
            const yRatio = y / boundingRect?.height;
            const xDeg = (xRatio - 0.5) * 5;
            const yDeg = (0.5 - yRatio) * 5;
            e.style.setProperty("--x-rotation", `${yDeg}deg`);
            e.style.setProperty("--y-rotation", `${xDeg}deg`);
            e.style.setProperty("--mouse-x-percentage", `${xRatio * 100}%`);
            e.style.setProperty("--mouse-y-percentage", `${yRatio * 100}%`);
        });
        // When the mouse leaves the picture card, reset tilt
        e.addEventListener("mouseleave", () => {
            e.style.setProperty("--x-rotation", "0deg");
            e.style.setProperty("--y-rotation", "0deg");
        });
    });

    const images = document.querySelectorAll(
        ".img",
    ) as NodeListOf<HTMLImageElement>;

    let selectedImageIndex = -1;

    const selectedImage = document.getElementById(
        "selected-image",
    ) as HTMLImageElement;

    images.forEach((img, idx) => {
        img.addEventListener("click", () => {
            const src = img.getAttribute("data-src");
            if (src) {
                selectedImage.setAttribute("src", src);
                selectedImageIndex = idx;
            }
        });
    });

    const selectedImageWrapper = document.getElementById(
        "selected-image-wrapper",
    ) as HTMLDivElement;
    selectedImageWrapper.addEventListener("click", () => {
        selectedImage.setAttribute("src", "");
    });
    selectedImage.addEventListener("click", (e) => {
        e.stopPropagation();
    });

    // Key handler
    document.addEventListener("keydown", (e) => {
        if (!selectedImage.classList.contains("hidden")) {
            switch (e.key) {
                case "Escape":
                    selectedImage.setAttribute("src", "");
                    break;
                case "ArrowLeft":
                    if (selectedImageIndex > 0) {
                        selectedImageIndex--;
                    }
                    const newSrcL =
                        images[selectedImageIndex].getAttribute("data-src");
                    selectedImage.setAttribute("src", newSrcL ?? "");
                    break;
                case "ArrowRight":
                    if (selectedImageIndex < images.length - 1) {
                        selectedImageIndex++;
                    }
                    const newSrcR =
                        images[selectedImageIndex].getAttribute("data-src");
                    selectedImage.setAttribute("src", newSrcR ?? "");
                    break;
                default:
            }
        }
    });
</script>

<style>
    #selected-image-wrapper {
        position: fixed;
        inset: 0 0;
        z-index: 1;
        display: grid;
        place-content: center;
        width: 100dvw;
        height: 100dvh;
        background-color: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(10px);

        &:has(#selected-image[src=""]) {
            display: none;
        }
    }

    #selected-image {
        height: 85dvh;
        z-index: 2;
    }

    #gallery {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: start;
        flex-wrap: wrap;
        gap: 1rem;
        padding: 8rem 4rem;
    }

    @media screen and (width <= 768px) {
        #gallery {
            --border-radius: 24px;
            padding: 4rem 1.5rem;
        }
    }

    .image-wrapper {
        --fade-from: 25%;
        --view-offset: -200px;
        transition:
            box-shadow var(--transition-duration),
            transform 50ms ease-out;
        box-shadow: 2px 2px 4px 4px rgba(0, 0, 0, 0.125);
        position: relative;
    }

    .image-wrapper::after {
        content: "";
        position: absolute;
        inset: 0 0;
        pointer-events: none;
    }

    .image-wrapper:hover::after {
        background: radial-gradient(
            at var(--mouse-x-percentage) var(--mouse-y-percentage),
            rgba(255, 255, 255, 0.1) 20%,
            transparent 100%
        );
    }

    .image-wrapper:hover {
        transform: scale(1.075);
        box-shadow: 4px 4px 4px 4px rgba(0, 0, 0, 0.25);
    }

    .img {
        padding: 0.33rem;
    }

    #gallery:has(.img:hover) .image-wrapper:not(:hover) {
        transform: scale(0.95);
        filter: grayscale(0.2);
    }

    .perspective-parent {
        perspective: 2400px;
    }

    .perspective {
        --x-rotation: 0;
        --y-rotation: 0;
    }

    .perspective:hover {
        transform: rotateX(var(--x-rotation)) rotateY(var(--y-rotation))
            rotateZ(calc((var(--y-rotation) - var(--x-rotation)) / 2));
    }
</style>
